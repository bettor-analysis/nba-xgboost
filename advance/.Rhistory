teams_2025_predictions <- teams_2025_predictions %>%
left_join(teams_2025_sd_data, by = "team_display_name")
# # simulate the final score for each team by taking the median of the simulation
# teams_2025_predictions <- teams_2025_predictions %>%
#   rowwise() %>%
#   mutate(
#     final_score_n = median(rnorm(10000, mean = predicted_score, sd = team_score_sd))
#   )
teams_2025_predictions <- teams_2025_predictions %>%
rowwise() %>%
mutate(
final_score_p = median(rpois(10000, lambda = predicted_score))
)
team_score_predictions <- teams_2025_predictions %>%
select(team_display_name, final_score_p) %>%
rename(team = team_display_name, score = final_score_p)
#-----------------------------------------------------------------------------#
#-----------------------------------------------------------------------------#
#-----------------------------------------------------------------------------#
# get the current seasons schedule
current_schedule <- load_nba_schedule(seasons = 2025)
# write the current schedule to a CSV file and put in data folder
write_csv(current_schedule, "data/current_schedule.csv")
# filter the current schedule to only include games that have not been played yet
current_schedule <- current_schedule %>%
filter(status_type_name == "STATUS_SCHEDULED")
current_schedule <- current_schedule %>%
mutate(
date_only = as.Date(status_type_detail, format = "%a, %B %dth")
)
# filter the current schedule for today's games
current_schedule <- current_schedule %>%
filter(date_only == Sys.Date())
current_schedule <- current_schedule %>%
arrange(date)
current_schedule <- current_schedule %>%
select(status_type_detail, home_display_name, away_display_name)
current_schedule <- current_schedule %>%
rename(date = status_type_detail,
home = home_display_name,
away = away_display_name)
# join the team score predictions with the current schedule
current_schedule <- current_schedule %>%
left_join(team_score_predictions, by = c("home" = "team")) %>%
rename(home_score = score)
current_schedule <- current_schedule %>%
left_join(team_score_predictions, by = c("away" = "team")) %>%
rename(away_score = score)
#-----------------------------------------------------------------------------#
#-----------------------------------------------------------------------------#
#-----------------------------------------------------------------------------#
todays_predictions <- current_schedule %>%
select(date, home, home_score, away, away_score)
todays_predictions <- todays_predictions %>%
mutate(
total_score = home_score + away_score,
spread = abs(home_score - away_score),
winner = ifelse(home_score > away_score, home, away)
)
# calculate win probabilities for each team
# Set a seed for reproducibility
set.seed(123)
# Perform simulation to calculate win probabilities
todays_predictions <- todays_predictions %>%
rowwise() %>%
mutate(
# Simulate 10,000 scores for home and away teams
home_sim = list(rpois(10000, lambda = home_score)),
away_sim = list(rpois(10000, lambda = away_score)),
# Calculate win probabilities
home_win_prob = mean(unlist(home_sim) > unlist(away_sim)),
away_win_prob = mean(unlist(away_sim) > unlist(home_sim))
) %>%
ungroup() %>%
# Remove simulation columns to clean up the dataframe
select(-home_sim, -away_sim)
# Normalize probabilities to ensure they sum to 1 (optional but recommended)
todays_predictions <- todays_predictions %>%
mutate(
total_prob = home_win_prob + away_win_prob,
home_win_prob = home_win_prob / total_prob,
away_win_prob = away_win_prob / total_prob
) %>%
select(-total_prob)
# Function to convert win probabilities to American odds
win_prob_to_odds <- function(prob) {
# Vectorized conversion using ifelse
odds <- ifelse(
prob > 0.5,
round(-(prob / (1 - prob)) * 100),
ifelse(
prob < 0.5,
round((1 - prob) / prob * 100),
100
)
)
return(odds)
}
# Apply the function to convert win probabilities to American odds
todays_predictions <- todays_predictions %>%
mutate(
home_fair_odds = round(win_prob_to_odds(home_win_prob)),
away_fair_odds = round(win_prob_to_odds(away_win_prob))
)
todays_predictions <- todays_predictions %>%
mutate(
home_win_prob = round(home_win_prob * 100, 2),
away_win_prob = round(away_win_prob * 100, 2)
)
# Display the final predictions
# print(todays_predictions)
# write the predictions to a CSV file and date with systems date to can
# track the predictions daily put them in the daily_predictions folder
write_csv(todays_predictions, paste0("daily_predictions/", Sys.Date(), "_nba_predictions.csv"))
#-----------------------------------------------------------------------------#
#-----------------------------------------------------------------------------#
#-----------------------------------------------------------------------------#
library(webshot2)
library(kableExtra)
# Rename columns for better readability
todays_predictions <- todays_predictions %>%
rename(
`Game Date & Time` = date,
`Home Team` = home,
`Home Score` = home_score,
`Away Team` = away,
`Away Score` = away_score,
`Total Score` = total_score,
`Spread` = spread,
`Winner` = winner,
`Home Win Probability` = home_win_prob,
`Away Win Probability` = away_win_prob,
`Home Fair Odds` = home_fair_odds,
`Away Fair Odds` = away_fair_odds
)
# Create the static table
static_table <- todays_predictions %>%
kable(
format = "html",
caption = paste0("Today's NBA Game Predictions ", Sys.Date()),
align = "c",
escape = TRUE,
booktabs = TRUE
) %>%
kable_styling(
bootstrap_options = c("striped"),
full_width = FALSE,
position = "center",
font_size = 12
) %>%
row_spec(0, bold = TRUE) %>%
column_spec(1, width = "3cm") %>%
column_spec(2:3, width = "2cm") %>%
column_spec(4:5, width = "2cm") %>%
column_spec(6, width = "2cm") %>%
column_spec(7, width = "2cm") %>%
column_spec(8, width = "2cm") %>%
column_spec(9:10, width = "3cm") %>%
column_spec(11:12, width = "3cm")
# Save as HTML
save_kable(static_table, "assets/todays_nba_predictions.html")
# Convert to PNG
webshot(
url = "assets/todays_nba_predictions.html",
file = "assets/todays_nba_predictions.png",
vwidth = 1200,
vheight = 800,
zoom = 2
)
# Optional: Open the image automatically (works on most systems)
browseURL("assets/todays_nba_predictions.png")
#-----------------------------------------------------------------------------#
#-----------------------------------------------------------------------------#
#-----------------------------------------------------------------------------#
# NFL Favorite and Underdog Win Rates by Spread Line
# Adam Wickwire - Bettor Analysis - 10/17/2024
#
# This script calculates the win rates for favorites and underdogs in
# NFL games based on the spread line. The data is sourced from the nflreadr
# package, which provides historical NFL game data. The script calculates
# the win rates for favorites and underdogs at each spread line, as well as
# the corresponding American odds for those win rates.
#
# The script can be used to analyze the performance of favorites and underdogs
# at different spread lines and shows the fair market odds, providing insights for bettors and
# sports analysts. The output includes the spread line, total games tested,
# favorite win rate, favorite odds, underdog win rate, and underdog odds.
# a total of 4804 games were tested in this analysis.
#
# load libraries
library(tidyverse)
library(nflreadr)
# Load the data
data <- load_schedules(seasons = TRUE)
# Select relevant columns and filter out games with missing home moneyline
data <- data %>%
select(away_score, home_score, away_moneyline, home_moneyline, spread_line) %>%
filter(!is.na(home_moneyline))
# Calculate margin of victory and determine winner
data <- data %>%
mutate(
home_mov = home_score - away_score,
home_win = if_else(home_mov > 0, 1, 0),
away_win = if_else(home_mov < 0, 1, 0)
)
# Take absolute value of spread_line if needed
data <- data %>%
mutate(spread_line = abs(spread_line))
# Determine if favorite or underdog won
data <- data %>%
mutate(
favorite_win = if_else(
(home_win == 1 & home_moneyline < 0) |
(away_win == 1 & away_moneyline < 0),
1,
0
),
underdog_win = if_else(
(home_win == 1 & home_moneyline > 0) |
(away_win == 1 & away_moneyline > 0),
1,
0
)
)
# Select relevant columns
spread_data <- data %>%
select(spread_line, favorite_win, underdog_win)
# remove any na values for favorite_win and underdog_win
spread_data <- spread_data %>%
filter(!is.na(favorite_win), !is.na(underdog_win)) %>%
arrange(spread_line)
# combine spreads that are greater than 14.5 into one category
spread_data <- spread_data %>%
mutate(spread_category = if_else(spread_line > 14.5, "15+", as.character(spread_line)))
spread_summary <- spread_data %>%
group_by(spread_category) %>%
summarise(
total_favorite_win = sum(favorite_win, na.rm = TRUE),
total_underdog_win = sum(underdog_win, na.rm = TRUE),
.groups = 'drop'  # This ensures the grouping is removed after summarising
)
# Calculate win rates for favorite and underdog at each spread line
spread_win_rates <- spread_summary %>%
mutate(
total_games = total_favorite_win + total_underdog_win,
favorite_win_rate = round(total_favorite_win / total_games, 3),
underdog_win_rate = round(total_underdog_win / total_games, 3)
)
# function to convert probabilities to american odds
percentage_to_american_odds <- function(p) {
# Initialize the odds vector with NA
odds <- rep(NA_integer_, length(p))
# Calculate odds for favorites (p > 50%)
favorite_idx <- which(p > 0.5)
odds[favorite_idx] <- -round((p[favorite_idx] / (1 - p[favorite_idx])) * 100)
# Calculate odds for underdogs (p < 50%)
underdog_idx <- which(p < 0.5)
odds[underdog_idx] <- round(((1 - p[underdog_idx]) / p[underdog_idx]) * 100)
# Handle even odds (p == 50%)
even_idx <- which(p == 0.5)
odds[even_idx] <- 100
# Optionally, set odds to NA for p = 0 or p = 100
odds[p == 0 | p == 100] <- NA_integer_
return(odds)
}
# Convert win rates to american odds
spread_win_rates <- spread_win_rates %>%
mutate(
favorite_odds = percentage_to_american_odds(favorite_win_rate),
underdog_odds = percentage_to_american_odds(underdog_win_rate)
)
# sum the total games tested
total_games <- sum(spread_win_rates$total_games)
# total_games tested is 4804
# arrange the spread categories in order
spread_win_rates <- spread_win_rates %>%
mutate(
spread_category_num = case_when(
spread_category == "15+" ~ Inf,
TRUE ~ as.numeric(spread_category)
)
)
spread_win_rates <- spread_win_rates %>%
arrange(spread_category_num) %>%
select(-spread_category_num)
# Set the final output data frame
final_output <- spread_win_rates %>%
select(spread_category, total_games, favorite_win_rate,
favorite_odds, underdog_win_rate, underdog_odds) %>%
rename(spread = spread_category)
# print(final_output, n = Inf)
View(data)
View(final_output)
# NFL Favorite and Underdog Win Rates by Spread Line
# Adam Wickwire - Bettor Analysis - 10/17/2024
#
# This script calculates the win rates for favorites and underdogs in
# NFL games based on the spread line. The data is sourced from the nflreadr
# package, which provides historical NFL game data. The script calculates
# the win rates for favorites and underdogs at each spread line, as well as
# the corresponding American odds for those win rates.
#
# The script can be used to analyze the performance of favorites and underdogs
# at different spread lines and shows the fair market odds, providing insights for bettors and
# sports analysts. The output includes the spread line, total games tested,
# favorite win rate, favorite odds, underdog win rate, and underdog odds.
# a total of 4804 games were tested in this analysis.
#
# load libraries
library(tidyverse)
library(nflreadr)
# Load the data
data <- load_schedules(seasons = TRUE)
# Select relevant columns and filter out games with missing home moneyline
data <- data %>%
select(away_score, home_score, away_moneyline, home_moneyline, spread_line) %>%
filter(!is.na(home_moneyline))
# Calculate margin of victory and determine winner
data <- data %>%
mutate(
home_mov = home_score - away_score,
home_win = if_else(home_mov > 0, 1, 0),
away_win = if_else(home_mov < 0, 1, 0)
)
# Take absolute value of spread_line if needed
data <- data %>%
mutate(spread_line = abs(spread_line))
# Determine if favorite or underdog won
data <- data %>%
mutate(
favorite_win = if_else(
(home_win == 1 & home_moneyline < 0) |
(away_win == 1 & away_moneyline < 0),
1,
0
),
underdog_win = if_else(
(home_win == 1 & home_moneyline > 0) |
(away_win == 1 & away_moneyline > 0),
1,
0
)
)
# Select relevant columns
spread_data <- data %>%
select(spread_line, favorite_win, underdog_win)
# remove any na values for favorite_win and underdog_win
spread_data <- spread_data %>%
filter(!is.na(favorite_win), !is.na(underdog_win)) %>%
arrange(spread_line)
# combine spreads that are greater than 14.5 into one category
spread_data <- spread_data %>%
mutate(spread_category = if_else(spread_line > 14.5, "15+", as.character(spread_line)))
spread_summary <- spread_data %>%
group_by(spread_category) %>%
summarise(
total_favorite_win = sum(favorite_win, na.rm = TRUE),
total_underdog_win = sum(underdog_win, na.rm = TRUE),
.groups = 'drop'  # This ensures the grouping is removed after summarising
)
# Calculate win rates for favorite and underdog at each spread line
spread_win_rates <- spread_summary %>%
mutate(
total_games = total_favorite_win + total_underdog_win,
favorite_win_rate = round(total_favorite_win / total_games, 3),
underdog_win_rate = round(total_underdog_win / total_games, 3)
)
# function to convert probabilities to american odds
percentage_to_american_odds <- function(p) {
# Initialize the odds vector with NA
odds <- rep(NA_integer_, length(p))
# Calculate odds for favorites (p > 50%)
favorite_idx <- which(p > 0.5)
odds[favorite_idx] <- -round((p[favorite_idx] / (1 - p[favorite_idx])) * 100)
# Calculate odds for underdogs (p < 50%)
underdog_idx <- which(p < 0.5)
odds[underdog_idx] <- round(((1 - p[underdog_idx]) / p[underdog_idx]) * 100)
# Handle even odds (p == 50%)
even_idx <- which(p == 0.5)
odds[even_idx] <- 100
# Optionally, set odds to NA for p = 0 or p = 100
odds[p == 0 | p == 100] <- NA_integer_
return(odds)
}
# Convert win rates to american odds
spread_win_rates <- spread_win_rates %>%
mutate(
favorite_odds = percentage_to_american_odds(favorite_win_rate),
underdog_odds = percentage_to_american_odds(underdog_win_rate)
)
# sum the total games tested
total_games <- sum(spread_win_rates$total_games)
# total_games tested is 4804
# arrange the spread categories in order
spread_win_rates <- spread_win_rates %>%
mutate(
spread_category_num = case_when(
spread_category == "15+" ~ Inf,
TRUE ~ as.numeric(spread_category)
)
)
spread_win_rates <- spread_win_rates %>%
arrange(spread_category_num) %>%
select(-spread_category_num)
# Set the final output data frame
final_output <- spread_win_rates %>%
select(spread_category, total_games, favorite_win_rate,
favorite_odds, underdog_win_rate, underdog_odds) %>%
rename(spread = spread_category)
print(final_output, n = Inf)
# load libraries
library(tidyverse)
library(nflreadr)
# Load the data
data <- load_schedules(seasons = TRUE)
# Select relevant columns and filter out games with missing home moneyline
data <- data %>%
select(away_score, home_score, away_moneyline, home_moneyline, spread_line) %>%
filter(!is.na(home_moneyline))
# Calculate margin of victory and determine winner
data <- data %>%
mutate(
home_mov = home_score - away_score,
home_win = if_else(home_mov > 0, 1, 0),
away_win = if_else(home_mov < 0, 1, 0)
)
# Take absolute value of spread_line if needed
data <- data %>%
mutate(spread_line = abs(spread_line))
# Determine if favorite or underdog won
data <- data %>%
mutate(
favorite_win = if_else(
(home_win == 1 & home_moneyline < 0) |
(away_win == 1 & away_moneyline < 0),
1,
0
),
underdog_win = if_else(
(home_win == 1 & home_moneyline > 0) |
(away_win == 1 & away_moneyline > 0),
1,
0
)
)
# Select relevant columns
spread_data <- data %>%
select(spread_line, favorite_win, underdog_win)
# remove any na values for favorite_win and underdog_win
spread_data <- spread_data %>%
filter(!is.na(favorite_win), !is.na(underdog_win)) %>%
arrange(spread_line)
# combine spreads that are greater than 14.5 into one category
spread_data <- spread_data %>%
mutate(spread_category = if_else(spread_line > 14.5, "15+", as.character(spread_line)))
spread_summary <- spread_data %>%
group_by(spread_category) %>%
summarise(
total_favorite_win = sum(favorite_win, na.rm = TRUE),
total_underdog_win = sum(underdog_win, na.rm = TRUE),
.groups = 'drop'  # This ensures the grouping is removed after summarising
)
# Calculate win rates for favorite and underdog at each spread line
spread_win_rates <- spread_summary %>%
mutate(
total_games = total_favorite_win + total_underdog_win,
favorite_win_rate = round(total_favorite_win / total_games, 3),
underdog_win_rate = round(total_underdog_win / total_games, 3)
)
# function to convert probabilities to american odds
percentage_to_american_odds <- function(p) {
# Initialize the odds vector with NA
odds <- rep(NA_integer_, length(p))
# Calculate odds for favorites (p > 50%)
favorite_idx <- which(p > 0.5)
odds[favorite_idx] <- -round((p[favorite_idx] / (1 - p[favorite_idx])) * 100)
# Calculate odds for underdogs (p < 50%)
underdog_idx <- which(p < 0.5)
odds[underdog_idx] <- round(((1 - p[underdog_idx]) / p[underdog_idx]) * 100)
# Handle even odds (p == 50%)
even_idx <- which(p == 0.5)
odds[even_idx] <- 100
# Optionally, set odds to NA for p = 0 or p = 100
odds[p == 0 | p == 100] <- NA_integer_
return(odds)
}
# Convert win rates to american odds
spread_win_rates <- spread_win_rates %>%
mutate(
favorite_odds = percentage_to_american_odds(favorite_win_rate),
underdog_odds = percentage_to_american_odds(underdog_win_rate)
)
# sum the total games tested
total_games <- sum(spread_win_rates$total_games)
# total_games tested is 4804
# arrange the spread categories in order
spread_win_rates <- spread_win_rates %>%
mutate(
spread_category_num = case_when(
spread_category == "15+" ~ Inf,
TRUE ~ as.numeric(spread_category)
)
)
spread_win_rates <- spread_win_rates %>%
arrange(spread_category_num) %>%
select(-spread_category_num)
# Set the final output data frame
final_output <- spread_win_rates %>%
select(spread_category, total_games, favorite_win_rate,
favorite_odds, underdog_win_rate, underdog_odds) %>%
rename(spread = spread_category)
print(final_output, n = Inf)
